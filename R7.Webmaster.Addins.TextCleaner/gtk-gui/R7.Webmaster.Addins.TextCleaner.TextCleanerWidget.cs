
// This file has been generated by the GUI designer. Do not modify.
namespace R7.Webmaster.Addins.TextCleaner
{
	public partial class TextCleanerWidget
	{
		private global::Gtk.UIManager UIManager;
		
		private global::Gtk.Action actionProcess;
		
		private global::Gtk.Action actionPaste;
		
		private global::Gtk.Action actionPasteHTML;
		
		private global::Gtk.Action actionCopy;
		
		private global::Gtk.Action actionCopyMarkup;
		
		private global::Gtk.Action actionPrevSource;
		
		private global::Gtk.Action actionNextSource;
		
		private global::Gtk.VBox vbox1;
		
		private global::Gtk.HBox hbox4;
		
		private global::Gtk.VBox vbox2;
		
		private global::Gtk.ScrolledWindow GtkScrolledWindow;
		
		private global::Gtk.TextView txvSource;
		
		private global::Gtk.Expander expander1;
		
		private global::Gtk.Notebook notebook1;
		
		private global::Gtk.ScrolledWindow GtkScrolledWindow1;
		
		private global::Gtk.TextView txvResult;
		
		private global::Gtk.Label label3;
		
		private global::Gtk.ScrolledWindow GtkScrolledWindow2;
		
		private global::Gtk.TextView textviewText;
		
		private global::Gtk.Label label2;
		
		private global::Gtk.Label GtkLabel20;
		
		private global::Gtk.Alignment alignment4;
		
		private global::Gtk.Alignment GtkAlignment7;
		
		private global::Gtk.Table table1;
		
		private global::Gtk.Alignment alignment2;
		
		private global::Gtk.Table tableClearTablesOptions;
		
		private global::Gtk.ComboBox comboWidthUnits;
		
		private global::Gtk.Entry entryTableClass;
		
		private global::Gtk.Label label1;
		
		private global::Gtk.Label label4;
		
		private global::Gtk.SpinButton spinTableWidth;
		
		private global::Gtk.Alignment alignment3;
		
		private global::Gtk.HBox hboxAutoCopyFormat;
		
		private global::Gtk.RadioButton rbnHtmlOut;
		
		private global::Gtk.RadioButton rbnPlainTextOut;
		
		private global::Gtk.CheckButton checkEmNames;
		
		private global::Gtk.CheckButton chkAutoCopy;
		
		private global::Gtk.CheckButton chkAutoProcess;
		
		private global::Gtk.CheckButton chkClearTables;
		
		private global::Gtk.CheckButton chkFixRssDate;

		protected virtual void Build ()
		{
			global::Stetic.Gui.Initialize (this);
			// Widget R7.Webmaster.Addins.TextCleaner.TextCleanerWidget
			Stetic.BinContainer w1 = global::Stetic.BinContainer.Attach (this);
			this.UIManager = new global::Gtk.UIManager ();
			global::Gtk.ActionGroup w2 = new global::Gtk.ActionGroup ("Default");
			this.actionProcess = new global::Gtk.Action ("actionProcess", global::Mono.Unix.Catalog.GetString ("_Process"), null, "gtk-media-play");
			this.actionProcess.IsImportant = true;
			this.actionProcess.ShortLabel = global::Mono.Unix.Catalog.GetString ("_Process");
			w2.Add (this.actionProcess, null);
			this.actionPaste = new global::Gtk.Action ("actionPaste", global::Mono.Unix.Catalog.GetString ("_Paste"), null, "gtk-paste");
			this.actionPaste.IsImportant = true;
			this.actionPaste.ShortLabel = global::Mono.Unix.Catalog.GetString ("_Paste");
			w2.Add (this.actionPaste, null);
			this.actionPasteHTML = new global::Gtk.Action ("actionPasteHTML", global::Mono.Unix.Catalog.GetString ("_Paste HTML"), null, "gtk-paste");
			this.actionPasteHTML.IsImportant = true;
			this.actionPasteHTML.ShortLabel = global::Mono.Unix.Catalog.GetString ("_Paste HTML");
			w2.Add (this.actionPasteHTML, null);
			this.actionCopy = new global::Gtk.Action ("actionCopy", global::Mono.Unix.Catalog.GetString ("_Copy"), null, "gtk-copy");
			this.actionCopy.IsImportant = true;
			this.actionCopy.ShortLabel = global::Mono.Unix.Catalog.GetString ("_Copy");
			w2.Add (this.actionCopy, null);
			this.actionCopyMarkup = new global::Gtk.Action ("actionCopyMarkup", global::Mono.Unix.Catalog.GetString ("_Copy Markup"), null, "gtk-copy");
			this.actionCopyMarkup.IsImportant = true;
			this.actionCopyMarkup.ShortLabel = global::Mono.Unix.Catalog.GetString ("_Copy Markup");
			w2.Add (this.actionCopyMarkup, null);
			this.actionPrevSource = new global::Gtk.Action ("actionPrevSource", global::Mono.Unix.Catalog.GetString ("Prev Source"), null, "gtk-undo");
			this.actionPrevSource.ShortLabel = global::Mono.Unix.Catalog.GetString ("Prev");
			w2.Add (this.actionPrevSource, null);
			this.actionNextSource = new global::Gtk.Action ("actionNextSource", global::Mono.Unix.Catalog.GetString ("Next Source"), null, "gtk-redo");
			this.actionNextSource.ShortLabel = global::Mono.Unix.Catalog.GetString ("Next Source");
			w2.Add (this.actionNextSource, null);
			this.UIManager.InsertActionGroup (w2, 0);
			this.Name = "R7.Webmaster.Addins.TextCleaner.TextCleanerWidget";
			// Container child R7.Webmaster.Addins.TextCleaner.TextCleanerWidget.Gtk.Container+ContainerChild
			this.vbox1 = new global::Gtk.VBox ();
			this.vbox1.Name = "vbox1";
			this.vbox1.Spacing = 6;
			// Container child vbox1.Gtk.Box+BoxChild
			this.hbox4 = new global::Gtk.HBox ();
			this.hbox4.Name = "hbox4";
			this.hbox4.Spacing = 6;
			// Container child hbox4.Gtk.Box+BoxChild
			this.vbox2 = new global::Gtk.VBox ();
			this.vbox2.Name = "vbox2";
			this.vbox2.Spacing = 6;
			// Container child vbox2.Gtk.Box+BoxChild
			this.GtkScrolledWindow = new global::Gtk.ScrolledWindow ();
			this.GtkScrolledWindow.Name = "GtkScrolledWindow";
			this.GtkScrolledWindow.ShadowType = ((global::Gtk.ShadowType)(3));
			this.GtkScrolledWindow.BorderWidth = ((uint)(6));
			// Container child GtkScrolledWindow.Gtk.Container+ContainerChild
			this.txvSource = new global::Gtk.TextView ();
			this.txvSource.CanFocus = true;
			this.txvSource.Name = "txvSource";
			this.txvSource.WrapMode = ((global::Gtk.WrapMode)(3));
			this.GtkScrolledWindow.Add (this.txvSource);
			this.vbox2.Add (this.GtkScrolledWindow);
			global::Gtk.Box.BoxChild w4 = ((global::Gtk.Box.BoxChild)(this.vbox2 [this.GtkScrolledWindow]));
			w4.Position = 0;
			// Container child vbox2.Gtk.Box+BoxChild
			this.expander1 = new global::Gtk.Expander (null);
			this.expander1.CanFocus = true;
			this.expander1.Name = "expander1";
			// Container child expander1.Gtk.Container+ContainerChild
			this.notebook1 = new global::Gtk.Notebook ();
			this.notebook1.CanFocus = true;
			this.notebook1.Name = "notebook1";
			this.notebook1.CurrentPage = 0;
			// Container child notebook1.Gtk.Notebook+NotebookChild
			this.GtkScrolledWindow1 = new global::Gtk.ScrolledWindow ();
			this.GtkScrolledWindow1.Name = "GtkScrolledWindow1";
			this.GtkScrolledWindow1.ShadowType = ((global::Gtk.ShadowType)(1));
			// Container child GtkScrolledWindow1.Gtk.Container+ContainerChild
			this.txvResult = new global::Gtk.TextView ();
			this.txvResult.HeightRequest = 100;
			this.txvResult.CanFocus = true;
			this.txvResult.Name = "txvResult";
			this.txvResult.WrapMode = ((global::Gtk.WrapMode)(3));
			this.GtkScrolledWindow1.Add (this.txvResult);
			this.notebook1.Add (this.GtkScrolledWindow1);
			// Notebook tab
			this.label3 = new global::Gtk.Label ();
			this.label3.Name = "label3";
			this.label3.LabelProp = global::Mono.Unix.Catalog.GetString ("Markup");
			this.notebook1.SetTabLabel (this.GtkScrolledWindow1, this.label3);
			this.label3.ShowAll ();
			// Container child notebook1.Gtk.Notebook+NotebookChild
			this.GtkScrolledWindow2 = new global::Gtk.ScrolledWindow ();
			this.GtkScrolledWindow2.Name = "GtkScrolledWindow2";
			this.GtkScrolledWindow2.ShadowType = ((global::Gtk.ShadowType)(1));
			// Container child GtkScrolledWindow2.Gtk.Container+ContainerChild
			this.textviewText = new global::Gtk.TextView ();
			this.textviewText.CanFocus = true;
			this.textviewText.Name = "textviewText";
			this.textviewText.WrapMode = ((global::Gtk.WrapMode)(3));
			this.GtkScrolledWindow2.Add (this.textviewText);
			this.notebook1.Add (this.GtkScrolledWindow2);
			global::Gtk.Notebook.NotebookChild w8 = ((global::Gtk.Notebook.NotebookChild)(this.notebook1 [this.GtkScrolledWindow2]));
			w8.Position = 1;
			// Notebook tab
			this.label2 = new global::Gtk.Label ();
			this.label2.Name = "label2";
			this.label2.LabelProp = global::Mono.Unix.Catalog.GetString ("Plain text");
			this.notebook1.SetTabLabel (this.GtkScrolledWindow2, this.label2);
			this.label2.ShowAll ();
			this.expander1.Add (this.notebook1);
			this.GtkLabel20 = new global::Gtk.Label ();
			this.GtkLabel20.Name = "GtkLabel20";
			this.GtkLabel20.LabelProp = global::Mono.Unix.Catalog.GetString ("Results:");
			this.GtkLabel20.UseUnderline = true;
			this.expander1.LabelWidget = this.GtkLabel20;
			this.vbox2.Add (this.expander1);
			global::Gtk.Box.BoxChild w10 = ((global::Gtk.Box.BoxChild)(this.vbox2 [this.expander1]));
			w10.Position = 1;
			w10.Expand = false;
			this.hbox4.Add (this.vbox2);
			global::Gtk.Box.BoxChild w11 = ((global::Gtk.Box.BoxChild)(this.hbox4 [this.vbox2]));
			w11.Position = 0;
			// Container child hbox4.Gtk.Box+BoxChild
			this.alignment4 = new global::Gtk.Alignment (0.5F, 0.5F, 1F, 1F);
			this.alignment4.Name = "alignment4";
			this.alignment4.RightPadding = ((uint)(5));
			this.alignment4.BottomPadding = ((uint)(5));
			// Container child alignment4.Gtk.Container+ContainerChild
			this.GtkAlignment7 = new global::Gtk.Alignment (0F, 0F, 1F, 1F);
			this.GtkAlignment7.Name = "GtkAlignment7";
			this.GtkAlignment7.LeftPadding = ((uint)(12));
			this.GtkAlignment7.TopPadding = ((uint)(4));
			// Container child GtkAlignment7.Gtk.Container+ContainerChild
			this.table1 = new global::Gtk.Table (((uint)(7)), ((uint)(1)), false);
			this.table1.Name = "table1";
			this.table1.RowSpacing = ((uint)(6));
			this.table1.ColumnSpacing = ((uint)(6));
			// Container child table1.Gtk.Table+TableChild
			this.alignment2 = new global::Gtk.Alignment (0.5F, 0.5F, 1F, 1F);
			this.alignment2.Name = "alignment2";
			this.alignment2.LeftPadding = ((uint)(24));
			this.alignment2.RightPadding = ((uint)(10));
			// Container child alignment2.Gtk.Container+ContainerChild
			this.tableClearTablesOptions = new global::Gtk.Table (((uint)(2)), ((uint)(3)), false);
			this.tableClearTablesOptions.Sensitive = false;
			this.tableClearTablesOptions.Name = "tableClearTablesOptions";
			this.tableClearTablesOptions.RowSpacing = ((uint)(6));
			this.tableClearTablesOptions.ColumnSpacing = ((uint)(6));
			// Container child tableClearTablesOptions.Gtk.Table+TableChild
			this.comboWidthUnits = global::Gtk.ComboBox.NewText ();
			this.comboWidthUnits.AppendText (global::Mono.Unix.Catalog.GetString ("%"));
			this.comboWidthUnits.AppendText (global::Mono.Unix.Catalog.GetString ("px"));
			this.comboWidthUnits.AppendText (global::Mono.Unix.Catalog.GetString ("pc"));
			this.comboWidthUnits.AppendText (global::Mono.Unix.Catalog.GetString ("em"));
			this.comboWidthUnits.AppendText (global::Mono.Unix.Catalog.GetString ("ex"));
			this.comboWidthUnits.AppendText (global::Mono.Unix.Catalog.GetString ("in"));
			this.comboWidthUnits.AppendText (global::Mono.Unix.Catalog.GetString ("pt"));
			this.comboWidthUnits.AppendText (global::Mono.Unix.Catalog.GetString ("cm"));
			this.comboWidthUnits.AppendText (global::Mono.Unix.Catalog.GetString ("mm"));
			this.comboWidthUnits.Name = "comboWidthUnits";
			this.comboWidthUnits.Active = 0;
			this.tableClearTablesOptions.Add (this.comboWidthUnits);
			global::Gtk.Table.TableChild w12 = ((global::Gtk.Table.TableChild)(this.tableClearTablesOptions [this.comboWidthUnits]));
			w12.TopAttach = ((uint)(1));
			w12.BottomAttach = ((uint)(2));
			w12.LeftAttach = ((uint)(2));
			w12.RightAttach = ((uint)(3));
			w12.XOptions = ((global::Gtk.AttachOptions)(4));
			w12.YOptions = ((global::Gtk.AttachOptions)(4));
			// Container child tableClearTablesOptions.Gtk.Table+TableChild
			this.entryTableClass = new global::Gtk.Entry ();
			this.entryTableClass.TooltipMarkup = "CSS class for cleaned table";
			this.entryTableClass.CanFocus = true;
			this.entryTableClass.Name = "entryTableClass";
			this.entryTableClass.Text = global::Mono.Unix.Catalog.GetString ("data");
			this.entryTableClass.IsEditable = true;
			this.entryTableClass.WidthChars = 12;
			this.entryTableClass.InvisibleChar = '●';
			this.tableClearTablesOptions.Add (this.entryTableClass);
			global::Gtk.Table.TableChild w13 = ((global::Gtk.Table.TableChild)(this.tableClearTablesOptions [this.entryTableClass]));
			w13.LeftAttach = ((uint)(1));
			w13.RightAttach = ((uint)(3));
			w13.YOptions = ((global::Gtk.AttachOptions)(4));
			// Container child tableClearTablesOptions.Gtk.Table+TableChild
			this.label1 = new global::Gtk.Label ();
			this.label1.Name = "label1";
			this.label1.Xalign = 1F;
			this.label1.LabelProp = global::Mono.Unix.Catalog.GetString ("CSS class:");
			this.tableClearTablesOptions.Add (this.label1);
			global::Gtk.Table.TableChild w14 = ((global::Gtk.Table.TableChild)(this.tableClearTablesOptions [this.label1]));
			w14.XOptions = ((global::Gtk.AttachOptions)(4));
			w14.YOptions = ((global::Gtk.AttachOptions)(4));
			// Container child tableClearTablesOptions.Gtk.Table+TableChild
			this.label4 = new global::Gtk.Label ();
			this.label4.Name = "label4";
			this.label4.Xalign = 1F;
			this.label4.LabelProp = global::Mono.Unix.Catalog.GetString ("Width:");
			this.tableClearTablesOptions.Add (this.label4);
			global::Gtk.Table.TableChild w15 = ((global::Gtk.Table.TableChild)(this.tableClearTablesOptions [this.label4]));
			w15.TopAttach = ((uint)(1));
			w15.BottomAttach = ((uint)(2));
			w15.XOptions = ((global::Gtk.AttachOptions)(4));
			w15.YOptions = ((global::Gtk.AttachOptions)(4));
			// Container child tableClearTablesOptions.Gtk.Table+TableChild
			this.spinTableWidth = new global::Gtk.SpinButton (0, 10000, 1);
			this.spinTableWidth.TooltipMarkup = "Width in % for cleaned table";
			this.spinTableWidth.CanFocus = true;
			this.spinTableWidth.Name = "spinTableWidth";
			this.spinTableWidth.Adjustment.PageIncrement = 10;
			this.spinTableWidth.ClimbRate = 10;
			this.spinTableWidth.Numeric = true;
			this.spinTableWidth.SnapToTicks = true;
			this.spinTableWidth.Value = 100;
			this.tableClearTablesOptions.Add (this.spinTableWidth);
			global::Gtk.Table.TableChild w16 = ((global::Gtk.Table.TableChild)(this.tableClearTablesOptions [this.spinTableWidth]));
			w16.TopAttach = ((uint)(1));
			w16.BottomAttach = ((uint)(2));
			w16.LeftAttach = ((uint)(1));
			w16.RightAttach = ((uint)(2));
			w16.YOptions = ((global::Gtk.AttachOptions)(4));
			this.alignment2.Add (this.tableClearTablesOptions);
			this.table1.Add (this.alignment2);
			global::Gtk.Table.TableChild w18 = ((global::Gtk.Table.TableChild)(this.table1 [this.alignment2]));
			w18.TopAttach = ((uint)(6));
			w18.BottomAttach = ((uint)(7));
			w18.XOptions = ((global::Gtk.AttachOptions)(4));
			w18.YOptions = ((global::Gtk.AttachOptions)(4));
			// Container child table1.Gtk.Table+TableChild
			this.alignment3 = new global::Gtk.Alignment (0.5F, 0.5F, 1F, 1F);
			this.alignment3.Name = "alignment3";
			this.alignment3.LeftPadding = ((uint)(24));
			this.alignment3.RightPadding = ((uint)(10));
			// Container child alignment3.Gtk.Container+ContainerChild
			this.hboxAutoCopyFormat = new global::Gtk.HBox ();
			this.hboxAutoCopyFormat.Name = "hboxAutoCopyFormat";
			this.hboxAutoCopyFormat.Spacing = 6;
			// Container child hboxAutoCopyFormat.Gtk.Box+BoxChild
			this.rbnHtmlOut = new global::Gtk.RadioButton (global::Mono.Unix.Catalog.GetString ("XML/HTML"));
			this.rbnHtmlOut.CanFocus = true;
			this.rbnHtmlOut.Name = "rbnHtmlOut";
			this.rbnHtmlOut.DrawIndicator = true;
			this.rbnHtmlOut.UseUnderline = true;
			this.rbnHtmlOut.Group = new global::GLib.SList (global::System.IntPtr.Zero);
			this.hboxAutoCopyFormat.Add (this.rbnHtmlOut);
			global::Gtk.Box.BoxChild w19 = ((global::Gtk.Box.BoxChild)(this.hboxAutoCopyFormat [this.rbnHtmlOut]));
			w19.Position = 0;
			w19.Expand = false;
			w19.Fill = false;
			// Container child hboxAutoCopyFormat.Gtk.Box+BoxChild
			this.rbnPlainTextOut = new global::Gtk.RadioButton (global::Mono.Unix.Catalog.GetString ("Plain text"));
			this.rbnPlainTextOut.CanFocus = true;
			this.rbnPlainTextOut.Name = "rbnPlainTextOut";
			this.rbnPlainTextOut.DrawIndicator = true;
			this.rbnPlainTextOut.UseUnderline = true;
			this.rbnPlainTextOut.Group = this.rbnHtmlOut.Group;
			this.hboxAutoCopyFormat.Add (this.rbnPlainTextOut);
			global::Gtk.Box.BoxChild w20 = ((global::Gtk.Box.BoxChild)(this.hboxAutoCopyFormat [this.rbnPlainTextOut]));
			w20.Position = 1;
			w20.Expand = false;
			w20.Fill = false;
			this.alignment3.Add (this.hboxAutoCopyFormat);
			this.table1.Add (this.alignment3);
			global::Gtk.Table.TableChild w22 = ((global::Gtk.Table.TableChild)(this.table1 [this.alignment3]));
			w22.TopAttach = ((uint)(2));
			w22.BottomAttach = ((uint)(3));
			w22.XOptions = ((global::Gtk.AttachOptions)(4));
			w22.YOptions = ((global::Gtk.AttachOptions)(4));
			// Container child table1.Gtk.Table+TableChild
			this.checkEmNames = new global::Gtk.CheckButton ();
			this.checkEmNames.CanFocus = true;
			this.checkEmNames.Name = "checkEmNames";
			this.checkEmNames.Label = global::Mono.Unix.Catalog.GetString ("Emphasize names");
			this.checkEmNames.Active = true;
			this.checkEmNames.DrawIndicator = true;
			this.checkEmNames.UseUnderline = true;
			this.table1.Add (this.checkEmNames);
			global::Gtk.Table.TableChild w23 = ((global::Gtk.Table.TableChild)(this.table1 [this.checkEmNames]));
			w23.TopAttach = ((uint)(3));
			w23.BottomAttach = ((uint)(4));
			w23.XOptions = ((global::Gtk.AttachOptions)(4));
			w23.YOptions = ((global::Gtk.AttachOptions)(4));
			// Container child table1.Gtk.Table+TableChild
			this.chkAutoCopy = new global::Gtk.CheckButton ();
			this.chkAutoCopy.CanFocus = true;
			this.chkAutoCopy.Name = "chkAutoCopy";
			this.chkAutoCopy.Label = global::Mono.Unix.Catalog.GetString ("Copy to clipboard");
			this.chkAutoCopy.Active = true;
			this.chkAutoCopy.DrawIndicator = true;
			this.chkAutoCopy.UseUnderline = true;
			this.table1.Add (this.chkAutoCopy);
			global::Gtk.Table.TableChild w24 = ((global::Gtk.Table.TableChild)(this.table1 [this.chkAutoCopy]));
			w24.TopAttach = ((uint)(1));
			w24.BottomAttach = ((uint)(2));
			w24.XOptions = ((global::Gtk.AttachOptions)(4));
			w24.YOptions = ((global::Gtk.AttachOptions)(4));
			// Container child table1.Gtk.Table+TableChild
			this.chkAutoProcess = new global::Gtk.CheckButton ();
			this.chkAutoProcess.CanFocus = true;
			this.chkAutoProcess.Name = "chkAutoProcess";
			this.chkAutoProcess.Label = global::Mono.Unix.Catalog.GetString ("Autoprocess");
			this.chkAutoProcess.Active = true;
			this.chkAutoProcess.DrawIndicator = true;
			this.chkAutoProcess.UseUnderline = true;
			this.table1.Add (this.chkAutoProcess);
			global::Gtk.Table.TableChild w25 = ((global::Gtk.Table.TableChild)(this.table1 [this.chkAutoProcess]));
			w25.XOptions = ((global::Gtk.AttachOptions)(4));
			w25.YOptions = ((global::Gtk.AttachOptions)(4));
			// Container child table1.Gtk.Table+TableChild
			this.chkClearTables = new global::Gtk.CheckButton ();
			this.chkClearTables.CanFocus = true;
			this.chkClearTables.Name = "chkClearTables";
			this.chkClearTables.Label = global::Mono.Unix.Catalog.GetString ("Clear tables");
			this.chkClearTables.DrawIndicator = true;
			this.chkClearTables.UseUnderline = true;
			this.table1.Add (this.chkClearTables);
			global::Gtk.Table.TableChild w26 = ((global::Gtk.Table.TableChild)(this.table1 [this.chkClearTables]));
			w26.TopAttach = ((uint)(5));
			w26.BottomAttach = ((uint)(6));
			w26.XOptions = ((global::Gtk.AttachOptions)(4));
			w26.YOptions = ((global::Gtk.AttachOptions)(4));
			// Container child table1.Gtk.Table+TableChild
			this.chkFixRssDate = new global::Gtk.CheckButton ();
			this.chkFixRssDate.Sensitive = false;
			this.chkFixRssDate.CanFocus = true;
			this.chkFixRssDate.Name = "chkFixRssDate";
			this.chkFixRssDate.Label = global::Mono.Unix.Catalog.GetString ("Localize RSS date");
			this.chkFixRssDate.DrawIndicator = true;
			this.chkFixRssDate.UseUnderline = true;
			this.table1.Add (this.chkFixRssDate);
			global::Gtk.Table.TableChild w27 = ((global::Gtk.Table.TableChild)(this.table1 [this.chkFixRssDate]));
			w27.TopAttach = ((uint)(4));
			w27.BottomAttach = ((uint)(5));
			w27.XOptions = ((global::Gtk.AttachOptions)(4));
			w27.YOptions = ((global::Gtk.AttachOptions)(4));
			this.GtkAlignment7.Add (this.table1);
			this.alignment4.Add (this.GtkAlignment7);
			this.hbox4.Add (this.alignment4);
			global::Gtk.Box.BoxChild w30 = ((global::Gtk.Box.BoxChild)(this.hbox4 [this.alignment4]));
			w30.Position = 1;
			w30.Expand = false;
			w30.Fill = false;
			this.vbox1.Add (this.hbox4);
			global::Gtk.Box.BoxChild w31 = ((global::Gtk.Box.BoxChild)(this.vbox1 [this.hbox4]));
			w31.Position = 0;
			this.Add (this.vbox1);
			if ((this.Child != null)) {
				this.Child.ShowAll ();
			}
			w1.SetUiManager (UIManager);
			this.chkFixRssDate.Hide ();
			this.Hide ();
			this.actionProcess.Activated += new global::System.EventHandler (this.OnActionProcessActivated);
			this.actionPaste.Activated += new global::System.EventHandler (this.OnActionPasteActivated);
			this.actionPasteHTML.Activated += new global::System.EventHandler (this.OnActionPasteHTMLActivated);
			this.actionCopy.Activated += new global::System.EventHandler (this.OnActionCopyActivated);
			this.actionCopyMarkup.Activated += new global::System.EventHandler (this.OnActionCopyMarkupActivated);
			this.actionPrevSource.Activated += new global::System.EventHandler (this.OnActionPrevSourceActivated);
			this.actionNextSource.Activated += new global::System.EventHandler (this.OnActionNextSourceActivated);
			this.chkClearTables.Toggled += new global::System.EventHandler (this.OnChkClearTablesToggled);
			this.chkAutoCopy.Toggled += new global::System.EventHandler (this.OnChkAutoCopyToggled);
		}
	}
}
