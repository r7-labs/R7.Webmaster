
// This file has been generated by the GUI designer. Do not modify.
namespace Stetic
{
	internal class Gui
	{
		private static bool initialized;

		internal static void Initialize (Gtk.Widget iconRenderer)
		{
			if ((Stetic.Gui.initialized == false)) {
				Stetic.Gui.initialized = true;
				global::Gtk.IconFactory w1 = new global::Gtk.IconFactory ();
				global::Gtk.IconSet w2 = new global::Gtk.IconSet ();
				global::Gtk.IconSource w3 = new global::Gtk.IconSource ();
				w3.Pixbuf = global::Stetic.IconLoader.LoadIcon (iconRenderer, "locked", global::Gtk.IconSize.Menu);
				w3.SizeWildcarded = false;
				w3.Size = global::Gtk.IconSize.Menu;
				w2.AddSource (w3);
				global::Gtk.IconSource w4 = new global::Gtk.IconSource ();
				w4.Pixbuf = global::Stetic.IconLoader.LoadIcon (iconRenderer, "locked", global::Gtk.IconSize.SmallToolbar);
				w4.SizeWildcarded = false;
				w4.Size = global::Gtk.IconSize.SmallToolbar;
				w2.AddSource (w4);
				global::Gtk.IconSource w5 = new global::Gtk.IconSource ();
				w5.Pixbuf = global::Stetic.IconLoader.LoadIcon (iconRenderer, "locked", global::Gtk.IconSize.LargeToolbar);
				w5.SizeWildcarded = false;
				w5.Size = global::Gtk.IconSize.LargeToolbar;
				w2.AddSource (w5);
				global::Gtk.IconSource w6 = new global::Gtk.IconSource ();
				w6.Pixbuf = global::Stetic.IconLoader.LoadIcon (iconRenderer, "locked", global::Gtk.IconSize.Button);
				w6.SizeWildcarded = false;
				w6.Size = global::Gtk.IconSize.Button;
				w2.AddSource (w6);
				w1.Add ("locked", w2);
				global::Gtk.IconSet w7 = new global::Gtk.IconSet ();
				global::Gtk.IconSource w8 = new global::Gtk.IconSource ();
				w8.Pixbuf = global::Stetic.IconLoader.LoadIcon (iconRenderer, "rotate", global::Gtk.IconSize.Menu);
				w8.SizeWildcarded = false;
				w8.Size = global::Gtk.IconSize.Menu;
				w7.AddSource (w8);
				global::Gtk.IconSource w9 = new global::Gtk.IconSource ();
				w9.Pixbuf = global::Stetic.IconLoader.LoadIcon (iconRenderer, "rotate", global::Gtk.IconSize.SmallToolbar);
				w9.SizeWildcarded = false;
				w9.Size = global::Gtk.IconSize.SmallToolbar;
				w7.AddSource (w9);
				global::Gtk.IconSource w10 = new global::Gtk.IconSource ();
				w10.Pixbuf = global::Stetic.IconLoader.LoadIcon (iconRenderer, "rotate", global::Gtk.IconSize.LargeToolbar);
				w10.SizeWildcarded = false;
				w10.Size = global::Gtk.IconSize.LargeToolbar;
				w7.AddSource (w10);
				global::Gtk.IconSource w11 = new global::Gtk.IconSource ();
				w11.Pixbuf = global::Stetic.IconLoader.LoadIcon (iconRenderer, "rotate", global::Gtk.IconSize.Button);
				w11.SizeWildcarded = false;
				w11.Size = global::Gtk.IconSize.Button;
				w7.AddSource (w11);
				w1.Add ("rotate", w7);
				w1.AddDefault ();
			}
		}
	}

	internal class IconLoader
	{
		public static Gdk.Pixbuf LoadIcon (Gtk.Widget widget, string name, Gtk.IconSize size)
		{
			Gdk.Pixbuf res = widget.RenderIcon (name, size, null);
			if ((res != null)) {
				return res;
			} else {
				int sz;
				int sy;
				global::Gtk.Icon.SizeLookup (size, out  sz, out  sy);
				try {
					return Gtk.IconTheme.Default.LoadIcon (name, sz, 0);
				} catch (System.Exception) {
					if ((name != "gtk-missing-image")) {
						return Stetic.IconLoader.LoadIcon (widget, "gtk-missing-image", size);
					} else {
						Gdk.Pixmap pmap = new Gdk.Pixmap (Gdk.Screen.Default.RootWindow, sz, sz);
						Gdk.GC gc = new Gdk.GC (pmap);
						gc.RgbFgColor = new Gdk.Color (255, 255, 255);
						pmap.DrawRectangle (gc, true, 0, 0, sz, sz);
						gc.RgbFgColor = new Gdk.Color (0, 0, 0);
						pmap.DrawRectangle (gc, false, 0, 0, (sz - 1), (sz - 1));
						gc.SetLineAttributes (3, Gdk.LineStyle.Solid, Gdk.CapStyle.Round, Gdk.JoinStyle.Round);
						gc.RgbFgColor = new Gdk.Color (255, 0, 0);
						pmap.DrawLine (gc, (sz / 4), (sz / 4), ((sz - 1) - (sz / 4)), ((sz - 1) - (sz / 4)));
						pmap.DrawLine (gc, ((sz - 1) - (sz / 4)), (sz / 4), (sz / 4), ((sz - 1) - (sz / 4)));
						return Gdk.Pixbuf.FromDrawable (pmap, pmap.Colormap, 0, 0, 0, 0, sz, sz);
					}
				}
			}
		}
	}

	internal class BinContainer
	{
		private Gtk.Widget child;
		
		private Gtk.UIManager uimanager;

		public static BinContainer Attach (Gtk.Bin bin)
		{
			BinContainer bc = new BinContainer ();
			bin.SizeRequested += new Gtk.SizeRequestedHandler (bc.OnSizeRequested);
			bin.SizeAllocated += new Gtk.SizeAllocatedHandler (bc.OnSizeAllocated);
			bin.Added += new Gtk.AddedHandler (bc.OnAdded);
			return bc;
		}

		private void OnSizeRequested (object sender, Gtk.SizeRequestedArgs args)
		{
			if ((this.child != null)) {
				args.Requisition = this.child.SizeRequest ();
			}
		}

		private void OnSizeAllocated (object sender, Gtk.SizeAllocatedArgs args)
		{
			if ((this.child != null)) {
				this.child.Allocation = args.Allocation;
			}
		}

		private void OnAdded (object sender, Gtk.AddedArgs args)
		{
			this.child = args.Widget;
		}

		public void SetUiManager (Gtk.UIManager uim)
		{
			this.uimanager = uim;
			this.child.Realized += new System.EventHandler (this.OnRealized);
		}

		private void OnRealized (object sender, System.EventArgs args)
		{
			if ((this.uimanager != null)) {
				Gtk.Widget w;
				w = this.child.Toplevel;
				if (((w != null) && typeof(Gtk.Window).IsInstanceOfType (w))) {
					((Gtk.Window)(w)).AddAccelGroup (this.uimanager.AccelGroup);
					this.uimanager = null;
				}
			}
		}
	}

	internal class ActionGroups
	{
		public static Gtk.ActionGroup GetActionGroup (System.Type type)
		{
			return Stetic.ActionGroups.GetActionGroup (type.FullName);
		}

		public static Gtk.ActionGroup GetActionGroup (string name)
		{
			return null;
		}
	}
}
